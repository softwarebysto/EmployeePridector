@page "/"
@layout MainLayout
@using Newtonsoft.Json;
@using OqTepaLavash.Services.IService;

<PageTitle>Employee</PageTitle>


@if (!_predicted)
{
    <form class="form">
        <div class="items">
            <div style="width:100%">
                <label class="lb" for="nome">Satisfaction level:</label>
                <input name="nome" id="nome" type="number" min="0" max="10" placeholder="In 10 scale base" class="infos" @bind-value="employeeRequest.satisfaction_level">
            </div>
            <div style="width:100%">
                <label for="email" class="lb">Last evaluation:</label>
                <input @bind-value="employeeRequest.last_evaluation" min="0" max="10" placeholder="In 10 scale base" name="number" id="email" type="email" class="infos">
            </div>
            <div style="width:100%">
                <label for="email" class="lb">Number of project(s):</label>
                <input @bind-value="employeeRequest.number_project" min="0" max="30" placeholder="Projects involved" name="number" id="email" type="email" class="infos">
            </div>
            <div style="width:100%">
                <label class="lb" for="nome">Average monthly hours:</label>
                <input @bind-value="employeeRequest.average_monthly_hours" min="0" placeholder="Work hours in month" name="nome" id="nome" type="number" class="infos">        
            </div>
            <div style="width:100%">
                <label for="email" class="lb">Time spend company:</label>
                <input @bind-value="employeeRequest.time_spend_company" min="0" max="70" placeholder="In years" name="email" id="email" type="number" class="infos">
            </div>
            <div style="width:100%">
                <label for="email" class="lb">Work accident:</label>
                <div class="radio">
	                <input checked="" @onchange="workChanged" value="1" name="accident" id="happened" type="radio" label="Happened">
	                <input name="accident" @onchange="workChanged" value="0" id="not-happened" type="radio" label="Not happened">	            
                </div>
            </div>
            <div style="width:100%">
                <label class="lb" for="nome">Promotion last 5 years:</label>
                <div class="radio">
	                <input checked="" name="promotion" @onchange="promotionChange" value="1" id="Promoted" type="radio" label="Promoted">
	                <input  name="promotion" id="not-Promoted" @onchange="promotionChange" value="0" type="radio" label="Not promoted">	            
                </div>
            </div>        
            <div style="width:100%">
                <label for="email" class="lb">Salary:</label>
                <div class="radio">
	                <input checked="" @onchange="salaryChange" value="0" name="salary"  type="radio" label="Low">
	                <input name="salary" @onchange="salaryChange" value="1" type="radio" label="Medium">	            
	                <input name="salary" @onchange="salaryChange" value="2" type="radio" label="High">	            
                </div>
            </div>
        </div>    
          <div class="buttons-action">
              <button  id="send" type="submit" @onclick="sendRequest">Predict</button>
              <button id="limpar" type="reset">Clear</button>
          </div>
    </form>
}
else
{
    <div class="card">
        @if (loading)
        {
            <div class="circle-color-loading circle"></div>
            <div class="circle-color-loading circle"></div>
        }
        else 
        {
            <div class="@($"{(willStay ? "circle-color-positive" : "circle-color-negative")}  circle")"></div>
            <div class="@($"{(willStay ? "circle-color-positive" : "circle-color-negative")}  circle")"></div>        
        }
        <div class="card-inner">
            @if(loading)
            {                
                <div class="loader">
                    <span class="loader-text">loading</span>
                      <span class="load"></span>
                </div>

            }
            else
            {
                <span style="@($"color:{(willStay ? "green" : "red")}; font-size:50px")">
                    @if (willStay)
                    {
                        <span>Will Stay</span>
                    }else
                    {
                        <span>Will not stay Stay</span>                                                
                    }
                </span>                    
                <button @onclick="rePredict">
                            <span class="circle1"></span>
                            <span class="circle2"></span>
                            <span class="circle3"></span>
                            <span class="circle4"></span>
                            <span class="circle5"></span>
                            <span class="text">Re-predict</span>
                </button>
            }

        </div>
    </div>
}

@code{
    [Inject]
    private IHttpRequestsService? httpRequestsService { get; set; }

    bool _predicted;
    bool willStay;
    bool loading;

    private EmployeeResponseModal? employeeResponse { get; set; }
    private EmployeeRequestModal? employeeRequest { get; set; } = new();

    void workChanged(ChangeEventArgs value)
    {        
        employeeRequest.work_accident = double.Parse(value?.Value?.ToString());

    }
    void promotionChange(ChangeEventArgs value)
    {
        employeeRequest.promotion_last_5years = double.Parse(value?.Value?.ToString());        
    }
    void salaryChange(ChangeEventArgs value)
    {
        employeeRequest.salary= double.Parse(value?.Value?.ToString());                
    }    
    void rePredict()
    {
        _predicted=false;
        loading = false;
        StateHasChanged();
    }    
    protected override void OnInitialized()
    {
        employeeRequest = new();
        employeeRequest.department = 5;
        employeeRequest.work_accident = 1;
        employeeRequest.promotion_last_5years = 1;
        employeeRequest.salary = 0;            

    }

    async Task sendRequest()
    {
        _predicted = true;
        if (httpRequestsService != null && employeeRequest!=null && 
            employeeRequest.work_accident!=null && 
        employeeRequest.salary!=null && 
        employeeRequest.promotion_last_5years!=null && 
        employeeRequest.average_monthly_hours!=null &&
        employeeRequest.average_monthly_hours!=null &&
        employeeRequest.last_evaluation!=null && 
        employeeRequest.satisfaction_level!=null && 
        employeeRequest.number_project!=null && 
        employeeRequest.time_spend_company!=null)
        {            
            try
            {
                loading = true;
                employeeRequest.department = 5;
                var response = await httpRequestsService.GetData($"employees?satisfaction_level={employeeRequest?.satisfaction_level}&last_evaluation={employeeRequest?.last_evaluation}&number_project={employeeRequest?.number_project}&average_monthly_hours={employeeRequest?.average_monthly_hours}&time_spend_company={employeeRequest?.time_spend_company}&work_accident={employeeRequest?.work_accident}&promotion_last_5years={employeeRequest?.promotion_last_5years}&department={employeeRequest?.department}&salary={employeeRequest?.salary}");
                string message = await response.Content.ReadAsStringAsync();
                employeeResponse = JsonConvert.DeserializeObject<EmployeeResponseModal>(message);
                if (employeeResponse != null)
                {                                  
                    if (employeeResponse?.predicted_data?.predicted?.First() == 0)
                        willStay = false;
                    else
                        willStay = true;
                }

            }
            catch (Exception)
            {

            } 
        }
        loading = false;
        StateHasChanged();
    } 

}